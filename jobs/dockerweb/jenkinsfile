pipeline {
    agent any

    parameters {
        string(name: 'name_container', defaultValue: 'proyecto-qa', description: 'nombre del docker')
        string(name: 'name_imagen', defaultValue: 'iproyecto-qa', description: 'nombre de la imagen')
        string(name: 'tag_imagen', defaultValue: 'latest', description: 'etiqueta de la imagen')
        string(name: 'puerto_imagen', defaultValue: '81', description: 'puerto a publicar')
    }

    environment {
        // ejemplo final: proyecto-qalatest81
        name_final = "${params.name_container}-${params.tag_imagen}-${params.puerto_imagen}"
    }

    stages {

        stage('stop/rm') {
            when {
                expression {
                    // Buscamos si ya existe un contenedor con ese nombre
                    def out = bat(
                        script: """
                            docker ps -aq --filter "name=${env.name_final}"
                        """,
                        returnStdout: true
                    ).trim()

                    // para debug si quieres:
                    echo "Contenedor encontrado? => '${out}'"
                    env.DOCKER_ID = out
                    return out != ""
                }
            }
            steps {
                script {
                    // detener contenedor si estaba corriendo
                    bat """
                        docker stop ${env.name_final} || exit /b 0
                    """
                    // eliminar contenedor para poder recrearlo con el mismo nombre
                    bat """
                        docker rm ${env.name_final} || exit /b 0
                    """
                }
            }
        }

        stage('build') {
            steps {
                script {
                    bat """
                        docker build jobs/dockerweb/ -t ${params.name_imagen}:${params.tag_imagen}
                    """
                }
            }
        }

        stage('run') {
            steps {
                script {
                    bat """
                        docker run -dp ${params.puerto_imagen}:80 --name ${env.name_final} ${params.name_imagen}:${params.tag_imagen}
                    """
                }
            }
        }
    }
}
